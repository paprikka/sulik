/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
.font-size(@font-size){
    font-size:@font-size*1px;
    font-size:(@font-size/@base-font-size)*1rem;
}

.font-size(@font-size, true){
    font-size:@font-size*1px;
    font-size:(@font-size/@base-font-size)*1rem;
    line-height:ceil(@font-size/@base-line-height)*(@base-line-height/@font-size);
}


/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida and @rowanmanning for refining and
 * improving my initial mixin.
 */
/*
@mixin headings($from: 1, $to: 6){
    @if $from >= 1 and $to <= 6{
        $heading-selector: (unquote(""));
        @for $i from $from through $to {
            $heading-selector: $heading-selector, unquote("h#{$i}")
        }
        #{$heading-selector}{
            @content
        }
    }
}
*/


/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `.box-sizing(border-box);`
 *
 */
.box-sizing(@value){
    -webkit-box-sizing:@value;
       -moz-box-sizing:@value;
        -ms-box-sizing:@value;
         -o-box-sizing:@value;
            box-sizing:@value;
}
.order(@value){
    -webkit-order:@value;
       -moz-order:@value;
        -ms-order:@value;
         -o-order:@value;
            order:@value;
}
.flex-direction(@value){
    -webkit-flex-direction:@value;
       -moz-flex-direction:@value;
        -ms-flex-direction:@value;
         -o-flex-direction:@value;
            flex-direction:@value;
}
.column-gap(@value){
    -webkit-column-gap:@value;
       -moz-column-gap:@value;
        -ms-column-gap:@value;
         -o-column-gap:@value;
            column-gap:@value;
}
.column-count(@value){
    -webkit-column-count:@value;
       -moz-column-count:@value;
        -ms-column-count:@value;
         -o-column-count:@value;
            column-count:@value;
}


/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/*
.keyframe (@animation-name){
    @-webkit-keyframes @animation-name{
        @content;
    }

    @-moz-keyframes @animation-name{
        @content;
    }

    @-ms-keyframes @animation-name{
        @content;
    }

    @-o-keyframes @animation-name{
        @content;
    }

    @keyframes @animation-name{
        @content;
    }
}
*/

/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `@truncation-boundary` is a united measurement.
 */
.truncate(@truncation-boundary){
    max-width:@truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}


/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `.arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `.arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       .arrow(top, left, #BADA55, #ACE);
   }
 *
 */

.set-arrows() when (@use-arrows = false) {}
.set-arrows() when (@use-arrows = true) {


@arrow-size:            @base-spacing-unit;
@arrow-border:          1;
@border:                @arrow-size;
@arrow:                 @arrow-size - @arrow-border;


.arrow(@arrow-edge, @arrow-location, @arrow-color, @border-color: 'null') {
    position:relative;

    &:before,
    &:after{
        /* LESS does not provide access to the outer scope */
        @ac: @arrow-color;
        @bc: @border-color;
        @border-color-local: ~`(this.bc.toJS() == "'null'")?this.ac.toJS():this.bc.toJS()`;

        content:"";
        position:absolute;
        border-collapse:separate;
        border: @border*1px solid transparent;
        .color(@arrow-edge,@border-color-local);
        .position(@arrow-edge,@arrow-location);
    }
    &:after{
        border-width:@arrow*1px;
        .color(@arrow-edge,@arrow-color);
        .position-after(@arrow-edge,@arrow-location);
    }


    .position(@arrow-edge,@arrow-location) when (@arrow-edge = right) {
        left: 100%;
        .location(@arrow-location);
        .location(@arrow-location) when (@arrow-location = top) {
            top: @arrow*1px;
        }
        .location(@arrow-location) when (@arrow-location = center) {
            top: 50%;
            .neg-margin-top(@border);
        }
        .location(@arrow-location) when (@arrow-location = bottom) {
            bottom: @arrow*1px;
        }
    }
    .position-after(@arrow-edge,@arrow-location) when (@arrow-edge = right),(@arrow-edge = left) {
        .location(@arrow-location);
        .location(@arrow-location) when (@arrow-location = top) {
            top: @border*1px;
        }
        .location(@arrow-location) when (@arrow-location = center) {
            top: 50%;
            .neg-margin-top(@arrow);
        }
        .location(@arrow-location) when (@arrow-location = bottom) {
            bottom: @border*1px;
        }
    }
    .color(@arrow-edge,@color) when (@arrow-edge = right) {
        border-left-color: @color!important;
    }

    .position(@arrow-edge,@arrow-location) when (@arrow-edge = left) {
        right: 100%;
        .location(@arrow-location);
        .location(@arrow-location) when (@arrow-location = top) {
            top: @arrow*1px;
        }
        .location(@arrow-location) when (@arrow-location = center) {
            top: 50%;
            .neg-margin-top(@border);
        }
        .location(@arrow-location) when (@arrow-location = bottom) {
            bottom: @arrow*1px;
        }
    }
    .color(@arrow-edge,@color) when (@arrow-edge = left) {
        border-right-color: @color!important;
    }

    .position(@arrow-edge,@arrow-location) when (@arrow-edge = top) {
        bottom: 100%;
        .location(@arrow-location);
        .location(@arrow-location) when (@arrow-location = left) {
            left: @arrow*1px;
        }
        .location(@arrow-location) when (@arrow-location = center) {
            left: 50%;
            .neg-margin-left(@border);
        }
        .location(@arrow-location) when (@arrow-location = right) {
            right: @arrow*1px;
        }
    }
    .position-after(@arrow-edge,@arrow-location) when (@arrow-edge = top),(@arrow-edge = bottom) {
        .location(@arrow-location);
        .location(@arrow-location) when (@arrow-location = left) {
            left: @border*1px;
        }
        .location(@arrow-location) when (@arrow-location = center) {
            left: 50%;
            .neg-margin-left(@arrow);
        }
        .location(@arrow-location) when (@arrow-location = right) {
            right: @border*1px;
        }
    }
    .color(@arrow-edge,@color) when (@arrow-edge = top) {
        border-bottom-color: @color!important;
    }

    .position(@arrow-edge,@arrow-location) when (@arrow-edge = bottom) {
        top: 100%;
        .location(@arrow-location);
        .location(@arrow-location) when (@arrow-location = left) {
            left: @arrow*1px;
        }
        .location(@arrow-location) when (@arrow-location = center) {
            left: 50%;
            .neg-margin-left(@border);
        }
        .location(@arrow-location) when (@arrow-location = right) {
            right: @arrow*1px;
        }
    }
    .color(@arrow-edge,@color) when (@arrow-edge = bottom) {
        border-top-color: @color!important;
    }


    .neg-margin-top(@width) {
        margin-top: @width*-1px;
    }
    .neg-margin-left(@width) {
        margin-left: @width*-1px;
    }
}

} // use-arrows=true mixin

.set-arrows();


/**
 * LESS - Mixin for block-lists as there's no @extend function yet
 *
 */
 .block-lists() {
    &,
    > li{
        border:0 solid @base-ui-color; /* Override this color in your theme stylesheet */
    }

    list-style:none;
    margin-left:0;
    border-top-width:1px;

    > li{
        border-bottom-width:1px;
        padding:@half-spacing-unit*1px;
    }
}

.block-list-links() {
    display:block;
    padding:@half-spacing-unit*1px;
    margin:-1*@half-spacing-unit*1px;
}

/**
 * Create global or selective box sizing rules based on the value passed
 *
 */
.do-global-border-box(@conditional) when (@conditional = true) {
    /**
     * Let’s make the box model all nice, shall we...?
     */
    *,
    *:before,
    *:after{
       .box-sizing(border-box);
    }
}
.do-global-border-box(@conditional) when (@conditional = false) {
}
.do-selective-border-box(@conditional) when (@conditional = false) {
   .box-sizing(border-box);
}
.do-selective-border-box(@conditional) when (@conditional = true) {
}


/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
/*
@mixin media-query($media-query){

    @if $media-query == palm{

        @media only screen and (max-width:$palm-end) { @content; }

    }

    @if $media-query == lap{

        @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content; }

    }

    @if $media-query == lap-and-up{

        @media only screen and (min-width:$lap-start) { @content; }

    }

    @if $media-query == portable{

        @media only screen and (max-width:$lap-end) { @content; }

    }

    @if $media-query == desk{

        @media only screen and (min-width:$desk-start) { @content; }

    }

    @if $media-query == desk-wide{

        @media only screen and (min-width: $desk-wide-start) { @content; }

    }

}
*/